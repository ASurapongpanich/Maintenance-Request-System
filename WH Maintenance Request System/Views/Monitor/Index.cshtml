@using System.Security.Claims
@{
    ViewData["Title"] = "Monitor";
    var userRole = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
    var position = User.Claims.FirstOrDefault(c => c.Type == "Position")?.Value;
    var section = User.Claims.FirstOrDefault(c => c.Type == "Section")?.Value;
}
<style>
    /* Status indicators */
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .status-online {
        background-color: #28a745;
    }

    .status-offline {
        background-color: #dc3545;
    }

    .status-maintenance {
        background-color: #ffc107;
    }

    .status-repair {
        background-color: #6c757d;
    }

    /* Calendar status cells */
    .day-cell {
        width: 30px;
        height: 30px;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
    }

    .day-online {
        background-color: rgba(40, 167, 69, 0.2);
    }

    .day-offline {
        background-color: rgba(220, 53, 69, 0.2);
    }

    .day-maintenance {
        background-color: rgba(255, 193, 7, 0.2);
    }

    .day-repair {
        background-color: rgba(108, 117, 125, 0.2);
    }

    /* Summary cards */
    .summary-card {
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: white;
    }

    .card-total {
        background: linear-gradient(135deg, #007bff, #00b4d8);
    }

    .card-online {
        background: linear-gradient(135deg, #28a745, #20c997);
    }

    .card-offline {
        background: linear-gradient(135deg, #dc3545, #fd7e14);
    }

    .card-repair {
        background: linear-gradient(135deg, #6c757d, #495057);
    }

    /* Modal styles */
    .modal-lg-custom {
        max-width: 800px;
    }

    /* Date range picker */
    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #007bff;
    }

    div.dt-container {
        width: 1800px;
        margin: 0 auto;
    }

    .custom-modal-width {
        max-width: 30%;
    }

    table.dataTable td.text-center,
    table.dataTable th.text-center {
        text-align: center; /* แนวนอน */
        vertical-align: middle; /* แนวตั้ง */
    }

    #equipmentTable tr.selected {
        background-color: #d1ecf1 !important;
    }

    #equipmentTable tbody tr {
        cursor: pointer;
    }

    .info-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
</style>

<!-- Summary Cards -->
<div class="mb-4 info-card">
    <div class="row ">
        <h2 class="section-title">Equipment Monitoring</h2>

        <div class="col-md-3">
            <div class="summary-card card-total">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-0">Total Equipment</h6>
                        <h2 class="mb-0" id="totalEquipment"></h2>
                    </div>
                    <i class="fas fa-server fa-3x opacity-50"></i>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card card-online">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-0">Online</h6>
                        <h2 class="mb-0" id="onlineEquipment"></h2>
                    </div>
                    <i class="fas fa-check-circle fa-3x opacity-50"></i>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card card-offline">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-0">Offline</h6>
                        <h2 class="mb-0" id="offlineEquipment"></h2>
                    </div>
                    <i class="fas fa-times-circle fa-3x opacity-50"></i>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="summary-card card-repair">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-0">In Repair</h6>
                        <h2 class="mb-0" id="repairEquipment"></h2>
                    </div>
                    <i class="fas fa-tools fa-3x opacity-50"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Date Filter -->
<div class="mb-4">
    <div class="info-card">
        <div class="row">
            <h2 class="section-title">Search</h2>
            <div class="col-md-3">
                <div class="form-group">
                    <label>Date Range</label>
                    <div class="input-group" >
                        <input type="text" class="form-control date-range-start" placeholder="Start Date">
                        <span class="input-group-text">to</span>
                        <input type="text" class="form-control date-range-end" placeholder="End Date">
                        <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="equipmentTypeFilter">Equipment Type</label>
                    <select class="form-control" id="equipmentTypeFilter">
                        <option value="">All Types</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="statusFilter">Status</label>
                    <select class="form-control" id="statusFilter">
                        <option value="">All Statuses</option>
                        <option value="Online">Online</option>
                        <option value="Offline">Offline</option>
                        <option value="Repair">Repair</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <button id="exportExcel" class="btn btn-success w-100">
                        <i class="fas fa-file-excel"></i> Export Excel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Equipment Table -->
<div class=" mb-4 info-card">
    <table id="equipmentTable" class="table table-striped table-bordered display nowrap order-column">
        <thead>
            <tr>
                <th>No</th>
                <th>Serial number</th>
                <th>Model</th>
                <th>Type</th>
                <th>Location</th>
                <th>IP address</th>
                <th>Host name</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

@* Form Update *@
<div id="equipmentFormCard" class="mb-4 info-card d-none">
    <form id="updateForm">
        <h2 class="section-title">Update</h2>
        <div class="row mb-3">
            <div class="col-md-3">
                <label>Serial Number</label>
                <input class="form-control" type="text" id="serialNumber" name="serialNumber" readonly>
            </div>
            <div class="col-md-3">
                <label>Model</label>
                <input class="form-control" type="text" id="model" name="model" readonly>
            </div>
            <div class="col-md-3">
                <label>Type</label>
                <select class="form-control" id="type" name="type">
                    <option value="">-- Select Type --</option>
                </select>
            </div>
            <div class="col-md-3">
                <label>Location</label>
                <input class="form-control" type="text" id="location" name="location" readonly>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-3">
                <label>IP</label>
                <input class="form-control" type="text" id="ip" name="ip" readonly>
            </div>
            <div class="col-md-3">
                <label>Status</label>
                <select class="form-control" id="status">
                    <option value="">All Statuses</option>
                    <option value="Online">Online</option>
                    <option value="Repair">Repair</option>
                </select>
            </div>
            <div class="col-md-3">
                <label>Host Name</label>
                <input class="form-control" type="text" id="hostName" name="hostName" readonly>
            </div>
        </div>

        <!-- Row ใหม่สำหรับปุ่ม Update -->
        <div class="row mb-3">
            <div class="col d-flex justify-content-end">
                <button class="btn btn-success" type="submit">
                    <i class="fa-solid fa-pen-to-square"></i> Update
                </button>
            </div>
        </div>
    </form>
</div>


<!-- Monthly Status Modal -->
<div class="modal fade" id="monthlyStatusModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg-custom">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="equipmentNameTitle">Equipment Monthly Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table id="monthlyStatusTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be loaded via AJAX -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Repair Request Modal -->
<div class="modal fade" id="repairRequestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog custom-modal-width">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Repair</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="repairRequestForm">
                    <input type="hidden" id="repairEquipmentId">
                    <div class="mb-3">
                        <label class="form-label">Serial Number</label>
                        <input type="text" class="form-control" id="repairSerialNumber" readonly>
                    </div><div class="mb-3">
                        <label class="form-label">Model</label>
                        <input type="text" class="form-control" id="repairModel" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <input type="text" class="form-control" id="repairType" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        <input type="text" class="form-control" id="repairLocation" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">IP</label>
                        <input type="text" class="form-control" id="repairIP" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Host Name</label>
                        <input type="text" class="form-control" id="repairHostName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="repairProblem" class="form-label">
                            <span style="color: red;">*</span> Problem Description
                        </label>
                        <textarea class="form-control" id="repairProblem" rows="3" required></textarea>
                        <div class="invalid-feedback" id="repairProblemError">Please enter the problem description.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitRepairRequest">Submit Request</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
        $(document).ready(function () {
            $.blockUI();

            const start = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
            const end = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);

            $(".date-range-start").datepicker({
                dateFormat: 'dd/M/yy',
                defaultDate: start,
                onSelect: function (selectedDate) {
                    $(".date-range-end").datepicker("option", "minDate", selectedDate);
                    triggerDataReload();
                }
            }).datepicker("setDate", start);

            $(".date-range-end").datepicker({
                dateFormat: 'dd/M/yy',
                defaultDate: end,
                onSelect: function () {
                    triggerDataReload();
                }
            }).datepicker("setDate", end);

            triggerDataReload();

            $('#equipmentTable').on('click', '.equipment-detail', function (e) {
                e.preventDefault();
                $('#repairProblem').removeClass('is-invalid');
                // ใช้ DataTables API ดึงข้อมูล row
                var table = $('#equipmentTable').DataTable();
                var rowData = table.row($(this).closest('tr')).data();

                // ใส่ค่าลงใน modal
                $('#repairSerialNumber').val(rowData.serialNumber);
                $('#repairEquipmentId').val(rowData.No);
                $('#repairModel').val(rowData.model);
                $('#repairType').val(rowData.type);
                $('#repairLocation').val(rowData.location);
                $('#repairIP').val(rowData.ip);
                $('#repairHostName').val(rowData.hostName);

                // แสดง modal
                $('#repairRequestModal').modal('show');
            });

            $('#statusFilter, #equipmentTypeFilter').change(function () {
                GetEquipmentData();
            });

            $('#submitRepairRequest').click(function () {
                var data = {
                    EquipmentId: $('#repairEquipmentId').val(),
                    SerialNumber: $('#repairSerialNumber').val(),
                    Model: $('#repairModel').val(),
                    Type: $('#repairType').val(),
                    Location: $('#repairLocation').val(),
                    IP: $('#repairIP').val(),
                    HostName: $('#repairHostName').val(),
                    ProblemDescription: $('#repairProblem').val()
                };

                $('#repairProblem').removeClass('is-invalid');

                if (!data.ProblemDescription.trim()) {
                    $('#repairProblem').addClass('is-invalid');
                    return;
                }

                Swal.fire({
                    title: 'Confirm Repair Request Submission',
                    text: "Are you sure you want to submit this repair request?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, submit it',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Monitor/SubmitRepairRequest',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(data),
                            success: function (response) {
                                $('#repairRequestForm')[0].reset();
                                $('#repairProblem').removeClass('is-invalid');
                                $('#repairRequestModal').modal('hide');

                                Swal.fire({
                                    toast: true,
                                    position: 'top',
                                    icon: response.success ? 'success' : 'error',
                                    title: response.message,
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                });
                            },
                            error: function (xhr) {
                                $('#repairRequestModal').modal('hide');

                                Swal.fire({
                                    toast: true,
                                    position: 'top',
                                    icon: 'error',
                                    title: "Error: " + xhr.responseText,
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                });
                            }
                        });
                    }
                });
            });

            GetEquipmentSummary();
            GetType();
            loadEquipmentTypesForForm();

            $('#exportExcel').on('click', function() {
                var table = $('#equipmentTable').DataTable();

                // ดึง column headers
                var headers = table.columns().header().toArray().map(h => $(h).text());

                // เตรียม array ของ array สำหรับ Excel
                var exportData = [];
                exportData.push(headers); // add header

                // loop แต่ละ row
                table.rows().every(function(rowIdx, tableLoop, rowLoop){
                    var row = [];
                    table.columns().every(function(colIdx, tableLoop, colLoop){
                        // ดึงค่าที่ render แล้ว
                        var cellData = table.cell(rowIdx, colIdx).render('display');
                        row.push(cellData);
                    });
                    exportData.push(row);
                });

                // สร้าง workbook และ worksheet
                var wb = XLSX.utils.book_new();
                var ws = XLSX.utils.aoa_to_sheet(exportData);

                XLSX.utils.book_append_sheet(wb, ws, "Equipment");
                XLSX.writeFile(wb, "EquipmentData.xlsx");
            });

            $('#equipmentTable').on('click', 'tbody tr', function () {
                const table = $('#equipmentTable').DataTable();
                const rowData = table.row(this).data();

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                    $('#updateForm')[0].reset();
                    $('#equipmentFormCard').addClass('d-none');
                } else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');

                    $('#serialNumber').val(rowData.serialNumber);
                    $('#model').val(rowData.model);
                    $('#type').val(rowData.type);
                    $('#location').val(rowData.location);
                    $('#ip').val(rowData.ip);
                    $('#hostName').val(rowData.hostName);

                    $('#equipmentFormCard').removeClass('d-none');
                }
            });

            $('#updateForm').submit(function (e) {
                e.preventDefault();
                $.blockUI();

                const equipment = {
                    serialNumber: $('#serialNumber').val(),
                    model: $('#model').val(),
                    type: $('#type').val(),
                    location: $('#location').val(),
                    ip: $('#ip').val(),
                    status: $('#status').val(),
                    hostName: $('#hostName').val()
                };

                $.ajax({
                    url: '/Monitor/UpdateEquipment',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(equipment),
                    success: function (res) {
                        if (res.success) {
                            // เรียก UpdateStatus ต่อ
                            $.ajax({
                                url: '/Monitor/UpdateStatus',
                                method: 'POST',
                                success: function (statusRes) {
                                    $.unblockUI(); 

                                    if (statusRes.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Updated!',
                                            text: 'Data has been successfully updated.',
                                            timer: 2000,
                                            showConfirmButton: false
                                        });

                                        // Reload datatable
                                        GetEquipmentData();
                                        $('#equipmentFormCard').addClass('d-none');
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Update Failed',
                                            text: 'Update status failed.'
                                        });
                                    }
                                },
                                error: function (xhr) {
                                    $.unblockUI(); 
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: xhr.responseText
                                    });
                                }
                            });
                        } else {
                            $.unblockUI(); 
                            Swal.fire({
                                icon: 'warning',
                                title: 'Update failed',
                                text: res.message
                            });
                        }
                    },
                    error: function (xhr) {
                        $.unblockUI(); 
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: xhr.responseText
                        });
                    }
                });
            });

        });

        function GetType() {
            $.ajax({
                url: '/Monitor/GetEquipmentTypes',
                method: 'GET',
                success: function (data) {
                    const select = $('#equipmentTypeFilter');
                    data.forEach(function (type) {
                        select.append(`<option value="${type}">${type}</option>`);
                    });
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        }

        function loadEquipmentTypesForForm() {
            $.ajax({
                url: '/Monitor/GetEquipmentTypes',
                method: 'GET',
                success: function (data) {
                    const select = $('#type');
                    select.empty();
                    select.append(`<option value="">-- Select Type --</option>`);
                    data.forEach(function (t) {
                        select.append(`<option value="${t}">${t}</option>`);
                    });
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        }

        function triggerDataReload() {
            const start = $('.date-range-start').val();
            const end = $('.date-range-end').val();
            if (start && end) {
                GetEquipmentData();
            }
        }

        function getDateRangeColumns(startDateStr, endDateStr) {
            const start = new Date(startDateStr);
            const end = new Date(endDateStr);
            const dateColumns = [];

            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            const current = new Date(start);
            while (current <= end) {
                const day = String(current.getDate()).padStart(2, '0'); 
                const month = monthNames[current.getMonth()]; 
                const shortDate = `${day} ${month}`; 

                dateColumns.push({
                    title: shortDate,
                    data: function(row){
                        return row.dailyStatus && row.dailyStatus[shortDate] ? row.dailyStatus[shortDate] : 'Offline';
                    },
                    className: 'text-center',
                    width: '50px',
                    orderable: false,
                    render: function(data) {
                        if (!data) return '';
                        if (data.toLowerCase() === 'online')  return '<img src="/images/check.png" style="width:32px; height:32px;">';
                        if (data.toLowerCase() === 'offline' || data.toLowerCase() === 'repair') return '<img src="/images/remove.png" style="width:28px; height:28px;">';
                        return '';
                    }
                });

                current.setDate(current.getDate() + 1);
            }

            return dateColumns;
        }

        function GetEquipmentSummary() {
            $.ajax({
                url: '/Monitor/GetEquipmentSummary',
                method: 'GET',
                success: function (data) {
                    if (data.success === false) {
                        alert("Error: " + data.message);
                        return;
                    }

                    $('#totalEquipment').text(data.total);
                    $('#onlineEquipment').text(data.online);
                    $('#offlineEquipment').text(data.offline);
                    $('#repairEquipment').text(data.repair);
                },
                error: function (xhr) {
                    alert("Error: Unable to load equipment summary. " + xhr.responseText);
                }
            });
        }

        function GetEquipmentData() {
            const startDate = $('.date-range-start').val();
            const endDate = $('.date-range-end').val();
            const type = $('#equipmentTypeFilter').val();
            const status = $('#statusFilter').val();

            if (!startDate || !endDate) {
                alert('Please select the full date range.');
                return;
            }

            const dateColumns = getDateRangeColumns(startDate, endDate);
            $.ajax({
                url: '/Monitor/GetEquipmentData',
                method: 'GET',
                data: {
                    startDate: startDate,
                    endDate: endDate,
                    type: type,
                    status: status
                },
                success: function (response) {
                    const data = response;
                    const baseColumns = [
                        {
                            data: null,
                            title: 'No',
                            className: 'text-center',
                            width: '5%',
                            render: function (data, type, row, meta) {
                                return meta.row + 1;
                            }
                        },
                        {
                            data: 'serialNumber',
                            title: 'Serial Number',
                            render: function (data, type, row) {
                                return data;
                            },
                            width: '10%',
                            className: 'text-center'
                        },
                        { data: 'model', title: 'Model', width: '10%', className: 'text-center' },
                        { data: 'type', title: 'Type', width: '10%', className: 'text-center' },
                        { data: 'location', title: 'Location', width: '10%', className: 'text-center' },
                        { data: 'ip', title: 'IP', width: '10%', className: 'text-center' },
                        { data: 'status', title: 'Status', width: '10%', className: 'text-center' },
                        { data: 'hostName', title: 'Host Name', width: '10%', className: 'text-center' }
                    ];

                    const allColumns = [...baseColumns, ...dateColumns];

                    if ($.fn.dataTable.isDataTable('#equipmentTable')) {
                        $('#equipmentTable').DataTable().clear().destroy();
                        $('#equipmentTable').empty();
                    }

                    $('#equipmentTable').DataTable({
                        data: data,
                        columns: allColumns,
                        scrollX: true,
                        scrollY: 430,
                        scrollCollapse: true,
                        deferRender: true,
                        fixedHeader: true,
                        paging: true,
                        lengthChange: true,
                        lengthMenu: [10, 50, 100, 200, 500, 1000, { label: 'All', value: -1 }],
                        pageLength: 1000,
                        fixedColumns: {
                            leftColumns: 2
                        }
                    });

                    $.unblockUI();
                },
                error: function (xhr) {
                    alert("Error loading equipment data: " + xhr.responseText);
                    $.unblockUI();
                }
            });
        }

    </script>
}